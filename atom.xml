<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-23T09:01:22.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/11/17/hello-world/"/>
    <id>http://example.com/2020/11/17/hello-world/</id>
    <published>2020-11-17T04:51:35.667Z</published>
    <updated>2020-10-23T09:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hello World</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何建立一个个人软件包仓库(PPA)</title>
    <link href="http://example.com/2020/09/07/how-to-setup-ubuntu-software-ppa-repo/"/>
    <id>http://example.com/2020/09/07/how-to-setup-ubuntu-software-ppa-repo/</id>
    <published>2020-09-07T09:10:26.000Z</published>
    <updated>2020-10-23T09:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article written by my student Xincheng Ren. He helps me setup the Ubuntu software repository for PicoScenes.</p><hr><p>本文将介绍如何在linux服务器上构建一个属于你自己的第三方软件仓库(Personal Package Archives，简称PPA)，构建完成之后，其他人将可以像安装linux官方源中的软件那样在命令行中安装你定制的软件。而和官方官方软件仓库稍微不同的是，需要首先添加你的软件源，之后便可以使用sudo apt update &amp;&amp; sudo apt install xxx来进行安装你的软件。</p><h3 id="1-操作平台"><a href="#1-操作平台" class="headerlink" title="1.操作平台"></a>1.操作平台</h3><p>安装了Ubuntu20.04的服务器</p><h3 id="2-软件仓库简介"><a href="#2-软件仓库简介" class="headerlink" title="2.软件仓库简介"></a>2.软件仓库简介</h3><p>很多人可能都在自己的电脑上更改过自己的软件源，以获得更快的软件下载速度，更改不同的源就对应着不同的软件仓库。比如Linux mint可以打开软件源(Software Resources)，通过测速和更改镜像源来比较获得一个更快的软件下载源，如图1所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/ppa-software-resources.png"></p><p>图1-软件源</p><p>更改源之后，可以执行sudo apt update &amp;&amp; sudo apt upgrade，可以发现下载软件速度明显提高。在更改官方源，update和upgrade时，在系统内部都进行了什么操作呢？<br>三步操作都各自完成了一个具体的操作：<br>1.更改官方源。每一个linux系统都有一个或者多个存放源的文件，比如在Linux mint20.04中，文件的完整路径为(对于不同的linux发行版存放软件源的文件可能有所区别，需要根据自己的系统具体查询)：/etc/apt/sources.list.d/official-package-repositories.list，在official-package-repositories.list中的内容如下(假设主要(ulyana)源和基础(focal)源均改为清华源)：</p><pre class="line-numbers language-none"><code class="language-none">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;linuxmint ulyana main upstream import backport deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu focal main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu focal-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu focal-backports main restricted universe multiversedeb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security main restricted universe multiversedeb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu&#x2F; focal partner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上可知，更改源是更改了第一行，第三四五行的内容。更改之后update和upgrade时查询软件仓库的地址即为清华源所对应的目录。而对于一些不在清华源的软件，则会从ubuntu官方的源仓库来进行安装。<br>2.update。在更改源之后进行，具体操作为查询软件仓库中的Release文件，InRelease文件以及文件的一些配置信息，数字签名等等。最重要的一点，对比软件仓库中的软件信息文件，是否有版本更新，然后在update查询之后显示有多少软件可以进行更新。<br>3.upgrade。在update更新之后，如果有软件可以更新，则从所更改的软件源来进行下载安装所有可以更新的软件。</p><p>假设你要构建一个包含三个deb包的软件仓库，分别first.deb，second.deb和single.deb，架构全部为amd64，其中的依赖关系为second.deb依赖first.deb，而first.deb和single.deb不依赖任何包。对于常见的linux软件仓库来说，其完成构建时，软件仓库的目录大致如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       ├── Contents-amd64.gz│       ├── Release│       ├── Release.gpg│       ├── apt.conf│       └── main│           └── binary-amd64│               ├── Packages│               └── Packages.gz├── pool│   └── main│       ├── first.deb│       ├── second.deb│       ├── single.deb└── project     └── ppa-public-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>典型的ubuntu仓库有dists目录和pool目录，dists中存放关于软件包的一些信息，如依赖关系，文件大小，所需要的系统架构等等；pool中存放实际要安装的deb包，实际的软件仓库一般main一个目录，可以按照自己的需要进行添加。对于大多数非官方仓库，会多一个project目录，其中存放服务器上导出的公钥文件，当公钥文件导入到系统中时，系统才会认为来自这个服务器的文件是安全的。</p><p>更改源可以简单理解为更改安装软件的地址，从不同的网络地址下载软件的速度是不一样的；update则可以简单理解为查询软件包的一系列参数。upgrade和install则可以理解为从安装软件的地址下载软件并安装在本机。从软件安装的角度来说，上述三步是简化了安装软件的步骤，这和你从软件源地址下载deb包点击安装得到的效果是一样的。</p><h3 id="3-配置信息生成"><a href="#3-配置信息生成" class="headerlink" title="3.配置信息生成"></a>3.配置信息生成</h3><p>假设你在服务器端已经有了first.deb，second.deb和single.deb这三个deb包。则对应于上一节的三个目录dists，pool和project我们已经完成了pool目录中文件的生成。接下来我们需要在服务器端进行一些修改，从而来生成dists和project中的内容。</p><h4 id="1-准备操作"><a href="#1-准备操作" class="headerlink" title="1.准备操作"></a>1.准备操作</h4><p>1.安装apache2服务器，具体操作参考上一文。<br>2.创建软件仓库所需要的文件夹，并将前面准备的三个deb包复制到/var/www/html/pool/main目录，预期的效果为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">上层目录为/var/www/html├── dists│   └── stable│       └── main│           └── binary-amd64├── pool│   └── main│       ├── first.deb│       ├── second.deb│       ├── single.deb└── project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.安装配置信息生成文件必备软件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装gpg</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gpg<span class="token comment"># 安装rng-tools</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> rng-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gpg可以生成服务器公钥，并导出公钥文件，从而供其他用户导入。rng-tools可以加快gpg生成公钥时产生随机值的过程，否则可能会很久甚至服务器未响应都不会产生所需要的随机值。<br>4.确保你的服务器上有压缩软件，例如gzip。<br>5.假设下文中在服务器上的操作均为管理员用户。</p><h4 id="2-dists目录中信息文件的生成"><a href="#2-dists目录中信息文件的生成" class="headerlink" title="2.dists目录中信息文件的生成"></a>2.dists目录中信息文件的生成</h4><p>以下的操作中，不做特殊说明，均在/var/www/html目录下进行，即在当前目录下列出文件或者查询工作目录的话，结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>dists  pool  project$ <span class="token builtin class-name">pwd</span>/var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-packages文件生成"><a href="#1-packages文件生成" class="headerlink" title="1.packages文件生成"></a>1.packages文件生成</h5><p>调用格式为：apt-ftparchive packages deb包所在目录 &gt; Packages文件路径和文件名。<br>例如如下命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成packages文件</span>$ apt-ftparchive packages pool/main <span class="token operator">></span> dists/stable/main/binary-amd64/Packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行之后会在/var/www/html/dists/stable/main/binary-amd64目录下生成一个Packages文件。Packages中的内容类似如下：</p><pre class="line-numbers language-none"><code class="language-none">Package: picoscenes-driverArchitecture: amd64Version: 20191229Priority: optionalSection: networkSource: picoscenes-driverMaintainer: Zhiping Jiang &lt;zpj@xidian.edu.cn&gt;Installed-Size: 2763Depends: linux-image-5.4.0-45-genericFilename: pool&#x2F;main&#x2F;picoscenes-driver-20191229.debSize: 619152MD5sum: 58b9342be5bcea08c5b66cb2288c2fc7SHA1: bba0cf6070383b0b5c1e455dfc04b1f2e5af493fSHA256: 2faeb2d3dadaa6507ba1dc380ce5e23889263ed03d21a654b2fc83954a3530d8SHA512: 5ddd2710086f5c441c97e5e011fec6317e412ba46e9845f1f758b5f5346675126dc1bff5bc98c815c6384bd1e6f2e8f6dc4f1b486beacf04f8c20ee67a8db259Homepage: https:&#x2F;&#x2F;zpj.io&#x2F;PicoScenesDescription: PicoScenes Driver This package contains the customized Qualcomm Atheros ar9300 (QCA9300) and Intel Wireless Link 5300 (IWL5300) Wi-Fi drivers for PicoScenes system. To reduce the maintainance work, this driver is ONLY compatible with kernel verion: 5.4.0-45-generic.Package: picoscenes-platformArchitecture: amd64Version: 2020.0816.1248Priority: optionalSection: develMaintainer: Zhiping Jiang&lt;zpj@xidian.edu.cn&gt;Installed-Size: 10340Depends: picoscenes-driver, build-essential, libboost-all-dev, openjdk-8-jre, libcpprest-dev, libssl-dev, net-tools, p7zip-full, hostapd, cpufrequtils, libsodium23, libfmt-dev, uhd-host, libopenblas-baseFilename: pool&#x2F;main&#x2F;picoscenes-platform-2020.0816.1248-Linux.debSize: 3395486MD5sum: 4888b72822ee635507b75c9cb3c7aa8eSHA1: 16ba5232fbc734e3da77af0685a9e092a0a6c0bdSHA256: 6ddee9f2936eb25c341f717aeaff67d69eb39d43f7e1e9227f382018697e0238SHA512: 1dcaa0b05fbc8e2cf0893b18279d3446e693762e14b8b9981079b3da3edf7b6992fb71bfb350e39e22b179144f1118ce370bd3f70ed2f1eb1ce9361c1055a026Homepage: https:&#x2F;&#x2F;zpj.io&#x2F;PicoScenesDescription: PicoScenes Platform  PicoScenes Platform, depending on PicoScenes Driver, wraps all the low-level Wi-Fi NIC controls into a bunch of powerful APIs for the atop PicoScenes plug-in subsystem.Package: picoscenes-plugins-demo-rxsbroadcaster-echoprobeArchitecture: amd64Version: 20.0718.0252Priority: optionalSection: develMaintainer: Zhiping Jiang&lt;zpj@xidian.edu.cn&gt;Installed-Size: 1153Depends: picoscenes-platformFilename: pool&#x2F;main&#x2F;picoscenes-plugins-demo-rxsbroadcaster-echoprobe-20.0718.0252-Linux.debSize: 349528MD5sum: 2b61bf7bfced4632148b79d87908d13cSHA1: 418452d5f64342e960aa35cee5bb59ea8c401794SHA256: 063f67584a2fcdcfb46c5b9a21eb99d4af19c9ec104d0b40c8f0a2078ba44a53SHA512: cbb301e0bc46783966b7b719f8c99f8e668efdf64b3a26b3ae89016762135f0cae52a3a20b20e193dcd77145074896f51acc8f83a1e41d4a87cc7b412479d725Homepage: https:&#x2F;&#x2F;zpj.io&#x2F;PicoScenesDescription: Three Sample Plug-Ins of PicoScenes System.  The plug-ins are: EchoProbe, us-level round-trip CSI measurement in UWB spectrum; RXS-Broadcaster, RxS data forwarding to the remote via UDP protocol; and Demo, the sample code of PicoScenes Plug-In Development Kit (PSPDK).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于你自己的deb仓库，生成的文件会有所不同，但是所拥有的参数都是类似的，例如Package，Source， Version，Architecture，和Maintainer等等，这些参数都是在deb文件中的control文件中的信息。还有一些是在control文件中所没有的，例如Filename，Size，MD5sum等等，这些都是apt-ftarchive packages所新生成的，主要起了对比文件信息的作用，例如如果软件仓库中的文件大小和packages文件中登记的文件大小不一样的时候，会报错，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Get:1  https:&#x2F;&#x2F;服务器地址&#x2F; stable main amd64 picoscenes-driver amd64 20191229 [619 kB]Err:1  https:&#x2F;&#x2F;服务器地址&#x2F; stable main amd64 picoscenes-driver amd64 20191229  Hash Sum mismatch  Hashes of expected file:   -SHA512:5ddd2710086f5c441c97e5e011fec6317e412ba46e9845f1f758b5f5346675126dc1bff5bc98c815c6384bd1e6f2e8f6dc4f1b486beacf04f8c20ee67a8db259   - SHA256:2faeb2d3dadaa6507ba1dc380ce5e23889263ed03d21a654b2fc83954a3530d8   - SHA1:bba0cf6070383b0b5c1e455dfc04b1f2e5af493f [weak]   - MD5Sum:58b9342be5bcea08c5b66cb2288c2fc7 [weak]   - Filesize:619152 [weak]     Hashes of received file:   - SHA512:f3bf69496b2f86f9a2a6d69baa3a19cacba20e7125251c922894725603a4e11cec764200ec8207d000033880086530a47e632dcadef0979cf716d7d05e377cf7   - SHA256:aa768f83bca305c3979399589bbdc0521804401017dda001ea9171517291cedb   - SHA1:1b03162a6336a58d253b8f919be041b360b04ae7 [weak]   - MD5Sum:83d4771518c082731bd40e253af4e7f8 [weak]   - Filesize:618820 [weak]     Last modification reported: Sat, 15 Aug 2020 02:11:56 +0000     E: Failed to fetch  https:&#x2F;&#x2F;服务器地址&#x2F;pool&#x2F;main&#x2F;picoscenes-driver-20191229.deb  Hash Sum mismatch        Hashes of expected file:         - SHA512:5ddd2710086f5c441c97e5e011fec6317e412ba46e9845f1f758b5f5346675126dc1bff5bc98c815c6384bd1e6f2e8f6dc4f1b486beacf04f8c20ee67a8db259         - SHA256:2faeb2d3dadaa6507ba1dc380ce5e23889263ed03d21a654b2fc83954a3530d8         - SHA1:bba0cf6070383b0b5c1e455dfc04b1f2e5af493f [weak]         - MD5Sum:58b9342be5bcea08c5b66cb2288c2fc7 [weak]         - Filesize:619152 [weak]        Hashes of received file:         - SHA512:f3bf69496b2f86f9a2a6d69baa3a19cacba20e7125251c922894725603a4e11cec764200ec8207d000033880086530a47e632dcadef0979cf716d7d05e377cf7         - SHA256:aa768f83bca305c3979399589bbdc0521804401017dda001ea9171517291cedb         - SHA1:1b03162a6336a58d253b8f919be041b360b04ae7 [weak]         - MD5Sum:83d4771518c082731bd40e253af4e7f8 [weak]         - Filesize:618820 [weak]        Last modification reported: Sat, 15 Aug 2020 02:11:56 +0000     E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Packages文件生成之后，还要做一件事，将Packages文件压缩，存放在和Packages文件相同的目录中，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成压缩包</span>$ <span class="token function">gzip</span> -9c dists/stable/main/binary-amd64/Packages <span class="token operator">></span> dists/stable/main/binary-amd64/Packages.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在本小节完成后，dists目录中的内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       └── main│           └── binary-amd64│               ├── Packages│               └── Packages.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-contents文件生成"><a href="#2-contents文件生成" class="headerlink" title="2.contents文件生成"></a>2.contents文件生成</h5><p>调用格式为：apt-ftparchive contents deb包所在目录 &gt; contents文件路径和文件名。由于最终需要的是一个压缩文件，在上述命令进行调整，添加一个压缩文件的一步。<br>调整后的命令格式参考如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成contents文件</span>$ apt-ftparchive contents pool/main  <span class="token function">gzip</span> -9c <span class="token operator">></span> dists/stable/Contents-amd64.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于在本文中的deb包架构为amd64，故需要生成一个名为Contents-amd64.gz，可根据自己的软件架构生成Contents-i386.gz或者Contents-armhf.gz。<br>contents文件中的内容为目录中的deb包中所有安装文件的绝对路径和文件名以及属于哪个deb包。如下所示为contents文件片段：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.usr/include/gmock/gmock-actions.h picoscenes-platformusr/include/gmock/gmock-cardinalities.h picoscenes-platformusr/include/gmock/gmock-function-mocker.h picoscenes-platformusr/include/gmock/gmock-generated-actions.h picoscenes-platform<span class="token punctuation">..</span>.usr/local/PicoScenes/plugins/libPDK-EchoProbe.so picoscenes-plugins-demo-rxsbroadcaster-echoprobeusr/local/PicoScenes/plugins/libPDK-demo.so picoscenes-plugins-demo-rxsbroadcaster-echoprobeusr/local/PicoScenes/plugins/libPlugIn-RXSBroadcaster.so picoscenes-plugins-demo-rxsbroadcaster-echoprobe<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本小节完成后，dists目录中的内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       ├── Contents-amd64.gz│       └── main│           └── binary-amd64│               ├── Packages│               └── Packages.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-apt-conf文件制作"><a href="#3-apt-conf文件制作" class="headerlink" title="3.apt.conf文件制作"></a>3.apt.conf文件制作</h5><p>atp.conf文件中主要包含了一些软件包的信息，可以参考如下形式，根据自己的需求创建apt.conf文件。若需要详细配置，则可以参考apt官方说明文档进行创建apt.conf文件，最终将apt.conf文件复制到和Contents-amd64.gz同样的目录，apt.conf参考内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">APT::FTPArchive::Release <span class="token punctuation">&#123;</span>Origin <span class="token string">"ubuntu"</span><span class="token punctuation">;</span>Label <span class="token string">"Ubuntu"</span><span class="token punctuation">;</span>Suite <span class="token string">"stable"</span><span class="token punctuation">;</span>Codename <span class="token string">"ulyana"</span><span class="token punctuation">;</span>Versin <span class="token string">"1.0"</span><span class="token punctuation">;</span>Architecture <span class="token string">"amd64"</span><span class="token punctuation">;</span>Components <span class="token string">"main"</span><span class="token punctuation">;</span>Description <span class="token string">"PicoScenes driver, platform, plugins and all."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本小节完成后，dists目录中的内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       ├── apt.conf│       ├── Contents-amd64.gz│       └── main│           └── binary-amd64│               ├── Packages│               └── Packages.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-release文件生成"><a href="#4-release文件生成" class="headerlink" title="4.release文件生成"></a>4.release文件生成</h5><p>调用格式为：apt-ftparchive -c apt.conf路径 release dists下对应软件目录 &gt; dists下对应软件目录/Release。命令参考格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成release文件</span>$ apt-ftparchive -c dists/stable/apt.conf release dists/stable <span class="token operator">></span> dists/stable/Release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的Release文件内容形式如下所示：</p><pre class="line-numbers language-none"><code class="language-none">Codename: ulyanaComponents: mainDate: Tue, 08 Sep 2020 03:36:43 +0000Description: PicoScenes driver, platform, plugins and all.Label: UbuntuOrigin: ubuntuSuite: stableMD5Sum: 4de5291165f3ddfdabd6b177f71a9d65             1749 Contents-amd64.gz 1468f7b3232a231f6a0680036e21fd17              174 Release ac956e2363b5d057c9fd507ba17b6f79             2860 main&#x2F;binary-amd64&#x2F;Packages 26f29795d563b5cab3bdd0b84c4b238e             1466 main&#x2F;binary-amd64&#x2F;Packages.gzSHA1: 38e46946208c73452b9208de8617e8904fb6b5bc             1749 Contents-amd64.gz 31400d36f372bdae9de45e550a8cc657c6d659dc              174 Release b9ee4d61fdba4a8fa6894dddd608485cf2ddcd21             2860 main&#x2F;binary-amd64&#x2F;Packages 3497f0c023366edbba492473e8307c4c26e76a3b             1466 main&#x2F;binary-amd64&#x2F;Packages.gzSHA256: addbcd1a4ef90fa4de802db680e0abb79552bf45697ef20533ab7f38b8988215             1749 Contents-amd64.gz 7ddf81179c6d143f714e443c970e8b1390e1ac17462b070bf03eba68056d083a              174 Release 3729fad154cf8748e03dd7356985139cabf98eac347c3c9cf686bc67e1795fce             2860 main&#x2F;binary-amd64&#x2F;Packages 74c1888a9f6b82295dcea66b78f9f123ba87ab766d49652859c0c4e66aab5d9b             1466 main&#x2F;binary-amd64&#x2F;Packages.gzSHA512: a86ff11bade4672403bd932eb092376fefb4bbc39774e234ec7c2ea48c5c62e3d4becd98c8c7f3abc1fb418df5b6c5981af69989a4df72b6bab3cc756e1a50a1             1749 Contents-amd64.gz 4ec161deb1ad5107974ef7939e0a84f9650dd085633f8265796efc101c1b00058f5138a494d08594d11f9f18f45597cc73c78ebce7cd784090d7ff78052ee97d              174 Release 3034171a9c06a3792915823019b9193ec62e5a3b50962330807aed677484b712ee79cd70a75e266fa41f246954180e315636e5a73456875abd1be407e64d1af2             2860 main&#x2F;binary-amd64&#x2F;Packages 9175417730f4988ae29bda88af33fafae2dcbd428f194a34d150cd55a7cd5fcbaa360e54d9cbd874af9c9e923fa2ce529ebce2ae868e8e68ecc3287927421c5b             1466 main&#x2F;binary-amd64&#x2F;Packages.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本小节完成后，dists目录中的内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       ├── apt.conf│       ├── Contents-amd64.gz│       ├── main│       │   └── binary-amd64│       │       ├── Packages│       │       └── Packages.gz│       └── Release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-Release-gpg文件"><a href="#5-Release-gpg文件" class="headerlink" title="5.Release.gpg文件"></a>5.Release.gpg文件</h5><p>最终Release.gpg文件是要生成在和Release的同一目录下，同样也是dists目录下的一个文件。但是由于是需要用到gpg软件进行操作，目前还没使用到gpg软件，所以将生成Release.gpg文件的操作放在下一章。</p><h4 id="3-project目录中信息文件的生成"><a href="#3-project目录中信息文件的生成" class="headerlink" title="3. project目录中信息文件的生成"></a>3. project目录中信息文件的生成</h4><p>以下的操作中，若不做特殊说明，均在/var/www/html目录下进行。</p><h5 id="1-ppa-public-key-gpg公钥导出"><a href="#1-ppa-public-key-gpg公钥导出" class="headerlink" title="1.ppa-public-key.gpg公钥导出"></a>1.ppa-public-key.gpg公钥导出</h5><p>注意：在project目录下的ppa-public-key.gpg文件和之前提到的Release.gpg是不同的两个文件。<br>目前，你已经安装了gpg和rng-tools，使用gpg –list-keys可以查看当前所生成过的密钥，当未生成过密钥时，显示如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示密钥</span>$ gpg --list-keys$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示为空，则我们需要在服务器端生成一个密钥，使用gpg –full-generate-key来生成密钥，如下所示为生成过程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成密钥</span>$ gpg --full-generate-keygpg <span class="token punctuation">(</span>GnuPG<span class="token punctuation">)</span> <span class="token number">2.2</span>.19<span class="token punctuation">;</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Please <span class="token keyword">select</span> what kind of key you want:   <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> RSA and RSA <span class="token punctuation">(</span>default<span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> DSA and Elgamal   <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> DSA <span class="token punctuation">(</span>sign only<span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> RSA <span class="token punctuation">(</span>sign only<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> Existing key from cardYour selection? <span class="token number">1</span><span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>RSA keys may be between <span class="token number">1024</span> and <span class="token number">4096</span> bits long.What keysize <span class="token keyword">do</span> you want? <span class="token punctuation">(</span><span class="token number">3072</span><span class="token punctuation">)</span> <span class="token number">4096</span><span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>Requested keysize is <span class="token number">4096</span> bitsPlease specify how long the key should be valid.         <span class="token number">0</span> <span class="token operator">=</span> key does not expire      <span class="token operator">&lt;</span>n<span class="token operator">></span>  <span class="token operator">=</span> key expires <span class="token keyword">in</span> n days      <span class="token operator">&lt;</span>n<span class="token operator">></span>w <span class="token operator">=</span> key expires <span class="token keyword">in</span> n weeks      <span class="token operator">&lt;</span>n<span class="token operator">></span>m <span class="token operator">=</span> key expires <span class="token keyword">in</span> n months      <span class="token operator">&lt;</span>n<span class="token operator">></span>y <span class="token operator">=</span> key expires <span class="token keyword">in</span> n yearsKey is valid for? <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>Key does not expire at allIs this correct? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> Y<span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>GnuPG needs to construct a user ID to identify your key.Real name: PPA-Demo<span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>Email address: XX@XXX.com<span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>Comment: NO<span class="token punctuation">(</span>用户输入确认<span class="token punctuation">)</span>You selected this <span class="token environment constant">USER</span>-ID:    <span class="token string">"PPA-Demo (NO) &lt;XX@XXX.com>"</span>Change <span class="token punctuation">(</span>N<span class="token punctuation">)</span>ame, <span class="token punctuation">(</span>C<span class="token punctuation">)</span>omment, <span class="token punctuation">(</span>E<span class="token punctuation">)</span>mail or <span class="token punctuation">(</span>O<span class="token punctuation">)</span>kay/<span class="token punctuation">(</span>Q<span class="token punctuation">)</span>uit? OWe need to generate a lot of random bytes. It is a good idea to performsome other action <span class="token punctuation">(</span>type on the keyboard, move the mouse, utilize thedisks<span class="token punctuation">)</span> during the prime generation<span class="token punctuation">;</span> this gives the random numbergenerator a better chance to gain enough entropy.<span class="token punctuation">(</span>会弹出一个窗口让你提示输入公钥密码以及重复一遍密码，如下<span class="token punctuation">)</span>      │ Please enter the passphrase to                       │                      │ protect your new key                                 │                      │                                                      │                      │ Passphrase: ________________________________________ │                      │                                                      │                      │       <span class="token operator">&lt;</span>OK<span class="token operator">></span>                              <span class="token operator">&lt;</span>Cancel<span class="token operator">></span>     │                 （假设输入的密码为PPAPwd并确认）We need to generate a lot of random bytes. It is a good idea to performsome other action <span class="token punctuation">(</span>type on the keyboard, move the mouse, utilize thedisks<span class="token punctuation">)</span> during the prime generation<span class="token punctuation">;</span> this gives the random numbergenerator a better chance to gain enough entropy.（上述显示在产生随机值，由于之前已经安装了rng-tools，所以产生随机值花费的时间不多，若未安装rng-tools，则此过程会十分漫长）gpg: key 7B2677D04250EA0E marked as ultimately trustedgpg: revocation certificate stored as <span class="token string">'/root/.gnupg/openpgp-revocs.d/DF431E9AFB953A977D83071A7B2677D04250EA0E.rev'</span>public and secret key created and signed.pub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>      DF431E9AFB953A977D83071A7B2677D04250EA0Euid                      PPA-Demo <span class="token punctuation">(</span>NO<span class="token punctuation">)</span> <span class="token operator">&lt;</span>XX@XXX.com<span class="token operator">></span>sub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再次显示密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示公钥</span>$ gpg --list-keys/root/.gnupg/pubring.kbx------------------------pub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>      DF431E9AFB953A977D83071A7B2677D04250EA0Euid           <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span> PPA-Demo <span class="token punctuation">(</span>NO<span class="token punctuation">)</span> <span class="token operator">&lt;</span>XX@XXX.com<span class="token operator">></span>sub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们完成了在服务器端生成密钥的操作，接下来就要导出密钥文件到project，操作命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出公钥文件</span>$ gpg --export  <span class="token operator">></span> project/ppa-public-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在本小节完成后，project目录中的内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">└── project    └── ppa-public-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-Release-gpg文件生成-最终生成后存放在dists-stable目录中"><a href="#2-Release-gpg文件生成-最终生成后存放在dists-stable目录中" class="headerlink" title="2.Release.gpg文件生成(最终生成后存放在dists/stable目录中)"></a>2.Release.gpg文件生成(最终生成后存放在dists/stable目录中)</h5><p>注意：本节的操作必须在Release文件生成后和密钥生成之后才可以进行，否则会出错。<br>调用格式为：gpg –passphrase ‘PPAPwd’ –pinentry-mode loopback –output dists/stable/Release.gpg -abs dists/stable/Release。如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成Release.gpg文件</span>$ gpg --passphrase <span class="token string">"PPAPwd"</span> --pinentry-mode loopback --output dists/stable/Release.gpg -abs dists/stable/Release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本条命令有点复杂，可以根据参数和值的顺序来进行分析：<br>命令开始于gpg，表示使用gpg软件中的gpg命令；<br>第一个参数为–passphrase，表示密钥的密码，即在–full-generate-key一步中输入的密码，在这里密码为：PPAPwd；<br>第二个参数为–pinentry-mode，表示设置pinentry的模式，在这里设置为loopback，表示可以使用–passphrase所提供的密码，从而可以实现不弹出界面而输入密钥密码，使之可以用脚本在服务器端导出公钥文件；<br>第三个参数为–output，表示写入到文件，值为dists/stable/Release.gpg。<br>第四个参数为-abs，包含–armor，–detach-sign和–sign(–clear-sign)三个参数，–armor表示输出一个以ascii编码的文件，其余两个参数表示签名。值为dists/stable/Release，表示使用之前生成的Release文件。</p><p>以上参数的详细含义可以通过：man gpg &gt; gpg帮助手册。来进行查看。<br>最终生成的文件内容形式如下：</p><pre class="line-numbers language-none"><code class="language-none">-----BEGIN PGP SIGNATURE-----iQIzBAABCgAdFiEEk5EedDfs91PXpQSCKfS6vV0k7tIFAl9XJBcACgkQKfS6vV0k7tIDJA&#x2F;+JA&#x2F;aE5TuSwZ3TY9jXlLZ7jN1vzmZ3kYrYf9u8YRfcuApiS8zt1gc8R8go3qvy8Cnc2ifVJai1fnmfCNDOR3LQru6VWfNJqRiO&#x2F;GHqc3IYsU2prNDJV+jXp57d0g3nLqKeCNlWgqxzvvcDC1wsZwiwMrjXxdNQXPWYolo79udmhPlW2lfQLnQfGDEOqP5qlDPTMvO3Agd+hDvel4T9wCha1QYc97vC369lb&#x2F;wUUkzVSp6arOEN8iTu3fMfGEl9O6dPCocDLaQGiSiepQiShoxDCE4d9McE2XQ2c4n1rwaYqlx6NckaM&#x2F;PH8PL1&#x2F;oJNx0ocVZd4SDttYh9Ir6yRKJppOZ7hbv64+xTEKcvKNTaTvXC85NVr&#x2F;6Q7d+WPeyn0wVuMfmzHcbgZ6ckwjv9GMUlKtp&#x2F;TL18xuUFMxI72tzSItmpH7&#x2F;2aqI5q3NRvVIy7NlDnDKjalrGsiQWOZb9jJAVacYzqN1SkDjK0Dt6WAQtRMSVq9y9fbjIBR7gMNwCAQs8wMSLPcehMrpi6Ny6om3FMeoZ4G2p4IVhPSeVUIRjowF+h7eLjASCGQpHkjzUaEgUqXvpXuZxmXT2qLJcxhiDQR9qqCDTpuo1Ps8XdcR4gjtYemSTc&#x2F;3QkXlKGDGpCRdyndN&#x2F;WRvqq2dhT&#x2F;zkUTAZtao7ijqZFbnthNftTn5j06w&#x3D;&#x3D;Wk3o-----END PGP SIGNATURE-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此为止，一个完整的PPA仓库创建完成。此时，目录结构如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dists│   └── stable│       ├── apt.conf│       ├── Contents-amd64.gz│       ├── main│       │   └── binary-amd64│       │       ├── Packages│       │       └── Packages.gz│       ├── Release│       └── Release.gpg├── pool│   └── main│       ├── picoscenes-driver-20191229.deb│       ├── picoscenes-platform-2020.0816.1248-Linux.deb│       └── picoscenes-plugins-demo-rxsbroadcaster-echoprobe-20.0718.0252-Linux.deb└── project    └── ppa-public-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用定制软件仓库安装软件"><a href="#4-使用定制软件仓库安装软件" class="headerlink" title="4.使用定制软件仓库安装软件"></a>4.使用定制软件仓库安装软件</h3><p>当搭建软件仓库成功后，在浏览器访问服务器IP或者访问对应域名，可以看见类似如图2所示内容：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/gpg-success.png"></p><p>图2-浏览器访问界面</p><p>这时其他用户就可以使用你定制的PPA，具体操作如下：</p><h4 id="1-添加密钥"><a href="#1-添加密钥" class="headerlink" title="1.添加密钥"></a>1.添加密钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加密钥(q后为大写英文字母O)</span>$ <span class="token function">wget</span> -qO- https://服务器地址/project/ppa-public-key.gpg  <span class="token function">sudo</span> apt-key <span class="token function">add</span> -OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示OK即可，这时可以通过apt-key list可以查看已经信任的密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示信任密钥</span>$ apt-key list/etc/apt/trusted.gpg--------------------<span class="token punctuation">..</span>.pub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>      DF43 1E9A FB95 3A97 7D83  071A 7B26 77D0 <span class="token number">4250</span> EA0Euid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> PPA-Demo <span class="token punctuation">(</span>NO<span class="token punctuation">)</span> <span class="token operator">&lt;</span>XX@XXX.com<span class="token operator">></span>sub   rsa4096 <span class="token number">2020</span>-09-08 <span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">..</span>./etc/apt/trusted.gpg.d/ubuntu-keyring-2012-archive.gpg------------------------------------------------------pub   rsa4096 <span class="token number">2012</span>-05-11 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>      790B C727 <span class="token number">7767</span> 219C 42C8  6F93 3B4F E6AC C0B2 1F32uid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> Ubuntu Archive Automatic Signing Key <span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>ftpmaster@ubuntu.com<span class="token operator">></span>/etc/apt/trusted.gpg.d/ubuntu-keyring-2012-cdimage.gpg------------------------------------------------------pub   rsa4096 <span class="token number">2012</span>-05-11 <span class="token punctuation">[</span>SC<span class="token punctuation">]</span>      <span class="token number">8439</span> 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 <span class="token number">1092</span>uid           <span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> Ubuntu CD Image Automatic Signing Key <span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>cdimage@ubuntu.com<span class="token operator">></span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其中有我们在服务器端生成的密钥，这表示此时PC机信任来自这个服务器密钥生成的配置信息。在添加密钥之后便可以添加软件仓库。</p><h4 id="２-添加软件仓库"><a href="#２-添加软件仓库" class="headerlink" title="２.添加软件仓库"></a>２.添加软件仓库</h4><p>添加软件仓库的命令add-apt-repository在软件包software-properties-common中，确保你的服务器已经安装software-properties-common，若没有安装，执行sudo apt install software-properties-common进行安装。<br>安装完成之后，执行如下命令添加软件仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加软件仓库</span>$ <span class="token function">sudo</span> add-apt-repository <span class="token string">'deb [arch=amd64] https://服务器地址/ stable main'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加之后如果执行sudo apt update将会看见你的服务器地址出现在列表中，类似如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新源</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token punctuation">..</span>.Ign:16 https://服务器地址 stable InRelease                                     Get:17 https://服务器地址 stable Release <span class="token punctuation">[</span><span class="token number">1,896</span> B<span class="token punctuation">]</span>                             Get:19 https://服务器地址 stable Release.gpg <span class="token punctuation">[</span><span class="token number">659</span> B<span class="token punctuation">]</span>                           Get:20 https://服务器地址 stable/main amd64 Packages <span class="token punctuation">[</span><span class="token number">1,690</span> B<span class="token punctuation">]</span>  <span class="token punctuation">..</span>.Reading package lists<span class="token punctuation">..</span>. Done                                    Building dependency tree       Reading state information<span class="token punctuation">..</span>. DoneAll packages are up to date.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这表明添加密钥及软件仓库成功，此后，就可以在终端直接sudo apt install xxx来安装你定制的软件。</p><h4 id="3-移除密钥以及软件仓库"><a href="#3-移除密钥以及软件仓库" class="headerlink" title="3.移除密钥以及软件仓库"></a>3.移除密钥以及软件仓库</h4><p>当出于某种原因需要移除密钥和软件仓库时，可以执行如下代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移除密钥(引号中的值即为apt-key list中显示的一长串字母数字的组合)</span>$ <span class="token function">sudo</span> apt-key del <span class="token string">'DF43 1E9A FB95 3A97 7D83  071A 7B26 77D0 4250 EA0E'</span>OK<span class="token comment"># 移除软件仓库</span><span class="token function">sudo</span> apt-add-repository -r <span class="token string">'deb [arch=amd64] https://服务器地址/ stable main'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两步都成功后，定制软件仓库完整的从本地移除，之后执行一次apt update来更新一下源仓库的配置信息即可。<br>对于基于ubuntu的发行版的linux机器，例如Linux mint20.04，可以在软件源(Software Sources)中进行移除软件仓库和认证密钥，如图3所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/ppa-software-resources-del.png"></p><p>图3-移除仓库和密钥</p><p>至此，一个完整的定制软件仓库生成，使用以及移除全部完成。</p>]]></content>
    
    
    <summary type="html">如何建立一个个人软件包仓库(PPA)</summary>
    
    
    
    <category term="Research" scheme="http://example.com/categories/Research/"/>
    
    
    <category term="Setup" scheme="http://example.com/tags/Setup/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="3rd-party PPA" scheme="http://example.com/tags/3rd-party-PPA/"/>
    
    <category term="apt install" scheme="http://example.com/tags/apt-install/"/>
    
    <category term="Software Source" scheme="http://example.com/tags/Software-Source/"/>
    
  </entry>
  
  <entry>
    <title>如何在Ubuntu20.04服务器上搭建WordPress.org网站</title>
    <link href="http://example.com/2020/08/25/install-wordpress-org-on-ubuntu-20-04/"/>
    <id>http://example.com/2020/08/25/install-wordpress-org-on-ubuntu-20-04/</id>
    <published>2020-08-25T04:51:54.000Z</published>
    <updated>2020-10-23T09:01:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article written by my student Xincheng Ren. He helps me setup this site.</p><hr><p>本文将详细介绍如何在Ubuntu20.04服务器上搭建WordPress.org网站。按照此教程所述的步骤进行，你将成功在你的服务器上搭建一个自己的WordPress.org网站。</p><h3 id="1-操作平台"><a href="#1-操作平台" class="headerlink" title="1.操作平台"></a>1.操作平台</h3><p>安装了Ubuntu20.04的服务器</p><h3 id="2-安装必备软件"><a href="#2-安装必备软件" class="headerlink" title="2.安装必备软件"></a>2.安装必备软件</h3><h4 id="１-安装PHP"><a href="#１-安装PHP" class="headerlink" title="１.安装PHP"></a>１.安装PHP</h4><p>在服务器端命令行执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装php</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php-curl php-gd php-mbstring php-xml php-xmlrpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：这些软件不包含在LAMP中，需要额外手动安装。</p><h4 id="2-安装LAMP"><a href="#2-安装LAMP" class="headerlink" title="2.安装LAMP"></a>2.安装LAMP</h4><p>LAMP(Linux + Apache + MySQL/MariaDB + PHP)是最经典的建站环境之一，安装LAMP只需要一句命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装LAMP</span>$ <span class="token function">sudo</span> tasksel <span class="token function">install</span> lamp-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者可以在tasksel用户界面来安装LAMP：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入tasksel用户界面</span>$ <span class="token function">sudo</span> tasksel<span class="token comment"># 上下选择到LAMP server，按下空格键进行选择和取消，按下Tab键，确认即可</span>Package configuration  ┌───────────────────────────────────┤ Software selection ├────────────────────────────────────┐  │ You can choose to <span class="token function">install</span> one or <span class="token function">more</span> of the following predefined collections of software.  │   │                                                                                             │   │ Choose software to install:                                                                 │   │                                                                                             │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> Xubuntu live CD                                                                  ↑   │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> Ubuntu Cloud Image <span class="token punctuation">(</span>instance<span class="token punctuation">)</span>                                                    ▮   │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> DNS server                                                                       ▒   │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> Kubuntu desktop                                                                  ▒   │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> LAMP server                                                                      ▒   │   │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> Lubuntu Desktop                                                                  ↓   │   │                                                                                             │   │                                                                                             │   │                                           <span class="token operator">&lt;</span>Ok<span class="token operator">></span>                                              │   │                                                                                             │   └─────────────────────────────────────────────────────────────────────────────────────────────┘                                                                             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-检测安装"><a href="#3-检测安装" class="headerlink" title="3.检测安装"></a>3.检测安装</h4><p>以上步骤完成后，在服务器端会生成一个新的目录/var/www/html，在新的目录下会生成一个新的文件index.html，完整的目录为：/var/www/html/index.html。若存在这个文件，则可在浏览器输入你的IP地址并确认(若不知道服务器IP地址，可以在服务器端命令行输入curl ifconfig.me并确认来查看)，一切顺利的话即可在出现图1所示界面。</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/Apache2-Ubuntu-Default-Page.png"></p><p>图1-apache2默认界面</p><p>若没有出现图1界面，则可以尝试卸载apache2再次安装。一些apache2常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装apache2</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apache2<span class="token comment"># 卸载apache2(若图1界面未显示,可加上--purge参数来删除配置信息,再安装)</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> remove apache2$ <span class="token function">sudo</span> <span class="token function">apt</span> remove apache2 --purge<span class="token comment"># 启动apache2服务</span>$ systemctl start apache2.service<span class="token comment"># 停止apache2服务</span>$ systemctl stop apache2.service<span class="token comment"># 重启apache2服务</span>$ systemctl restart apache2.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终保证可以在浏览器输入IP地址确认后可以出现图1界面即可。</p><h3 id="3-配置MySQL"><a href="#3-配置MySQL" class="headerlink" title="3.配置MySQL"></a>3.配置MySQL</h3><h4 id="1-安全配置MySQL"><a href="#1-安全配置MySQL" class="headerlink" title="1.安全配置MySQL"></a>1.安全配置MySQL</h4><p>虽然安装LAMP后，在MySQL中会有一些默认设置，但是还是应该修改一下MySQL的一些设置，以提高MySQL的安全性。包括：<br>1.为本地管理员帐户设置密码；<br>2.删除可以从外部访问的管理员帐户；<br>3.删除匿名用户账户；<br>4.删除测试数据库（默认情况下，所有用户，甚至匿名用户都可以访问该数据库），以及允许所有用户访问以``test_”开头的数据库。</p><p>运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安全配置MySQL</span>$ <span class="token function">sudo</span> mysql_secure_installation<span class="token comment"># 会按照一下顺序出现在终端中</span>Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to <span class="token builtin class-name">test</span> passwordsand improve security. It checks the strength of passwordand allows the <span class="token function">users</span> to <span class="token builtin class-name">set</span> only those passwords <span class="token function">which</span> aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No: Y（用户输入确认）There are three levels of password validation policy:LOW    Length <span class="token operator">></span><span class="token operator">=</span> <span class="token number">8</span>MEDIUM Length <span class="token operator">></span><span class="token operator">=</span> <span class="token number">8</span>, numeric, mixed case, and special charactersSTRONG Length <span class="token operator">></span><span class="token operator">=</span> <span class="token number">8</span>, numeric, mixed case, special characters and dictionary                  <span class="token function">file</span>Please enter <span class="token number">0</span> <span class="token operator">=</span> LOW, <span class="token number">1</span> <span class="token operator">=</span> MEDIUM and <span class="token number">2</span> <span class="token operator">=</span> STRONG: <span class="token number">1</span>（用户输入确认）Please <span class="token builtin class-name">set</span> the password <span class="token keyword">for</span> root here.New password: （用户输入确认）Re-enter new password: （用户输入确认）Estimated strength of the password: <span class="token number">100</span> Do you wish to <span class="token builtin class-name">continue</span> with the password provided?<span class="token punctuation">(</span>Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y（用户输入确认）By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created <span class="token keyword">for</span> them. This is intended only <span class="token keyword">for</span>testing, and to <span class="token function">make</span> the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? <span class="token punctuation">(</span>Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y（用户输入确认）Success.Normally, root should only be allowed to connect from<span class="token string">'localhost'</span><span class="token builtin class-name">.</span> This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? <span class="token punctuation">(</span>Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y（用户输入确认）Success.By default, MySQL comes with a database named <span class="token string">'test'</span> thatanyone can access. This is also intended only <span class="token keyword">for</span> testing,and should be removed before moving into a productionenvironment.Remove <span class="token builtin class-name">test</span> database and access to it? <span class="token punctuation">(</span>Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y（用户输入确认） - Dropping <span class="token builtin class-name">test</span> database<span class="token punctuation">..</span>.   Success. - Removing privileges on <span class="token builtin class-name">test</span> database<span class="token punctuation">..</span>.   Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? <span class="token punctuation">(</span>Press yY <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Y（用户输入确认）Success.All done<span class="token operator">!</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，MySQL安全配置完成。</p><h4 id="2-修改防火墙配置"><a href="#2-修改防火墙配置" class="headerlink" title="2.修改防火墙配置"></a>2.修改防火墙配置</h4><p>修改防火墙以允许外部访问默认的Web端口。配置一个UFW防火墙来限制对服务器的访问。<br>允许Apache Full（此配置文件打开端口80（正常，未加密的Web流量）和端口443（TLS / SSL加密流量））配置文件的传入流量。</p><p>运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加防火墙</span>$ <span class="token function">sudo</span> ufw allow <span class="token keyword">in</span> <span class="token string">'Apache Full'</span>Rules updatedRules updated <span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来可以查看防火墙状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看防火墙状态</span>$ <span class="token function">sudo</span> ufw statusStatus: activeTo                         Action      From--                         ------      ----Apache Full                ALLOW       Anywhere     Apache Full <span class="token punctuation">(</span>v6<span class="token punctuation">)</span>           ALLOW       Anywhere <span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token comment"># 假如显示的结果是：</span>Status: inactive<span class="token comment"># 则需要启动防火墙</span>$ <span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span>Firewall is active and enabled on system startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-创建数据库和用户账户"><a href="#3-创建数据库和用户账户" class="headerlink" title="3. 创建数据库和用户账户"></a>3. 创建数据库和用户账户</h4><p>首先以管理员用户登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 管理员账户登录MySQL</span>$ <span class="token function">sudo</span> mysql -u root -pEnter password: （用户输入确认）Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or g.Your MySQL connection <span class="token function">id</span> is <span class="token number">14</span>Server version: <span class="token number">8.0</span>.21-0ubuntu0.20.04.4 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2020</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个名为wordpress的数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE DATABASE wordpress;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个wordpress用户并授权：用户名为’username’，密码为<code>&#39;Userpwd123+&#39;</code>，<code>&#39;%&#39;</code>表示允许远程登陆但是不允许本机登录；赋予权限表示将数据库<code>wordpress</code>下的所有表授权给用户<code>&#39;username&#39;</code>，这样用户<code>&#39;username&#39;</code>就能远程访问到这个数据库(<code>wordpress</code>)下的所有表。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--创建用户mysql&gt; CREATE USER &#39;username&#39;@&#39;%&#39; IDENTIFIED BY &#39;Userpwd123+&#39;;Query OK, 0 rows affected (0.01 sec)--赋予权限--不同版本赋予权限的语法不同，应具体根据自己的MySQL版本，本机版本为8.0.21-0ubuntu0.20.04.4mysql&gt; GRANT ALL ON wordpress.* to &#39;username&#39;@&#39;%&#39;;Query OK, 0 rows affected (0.00 sec)--刷新MySQL的系统权限相关表mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.01 sec)--退出mysql&gt; exit;Bye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-下载安装WordPress"><a href="#4-下载安装WordPress" class="headerlink" title="4.下载安装WordPress"></a>4.下载安装WordPress</h3><p>下载最新版本的WordPress：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入/var/www/html目录</span>$ <span class="token builtin class-name">cd</span> /var/www/html<span class="token comment"># 删除index.html</span>$ <span class="token function">sudo</span> <span class="token function">rm</span> index.html<span class="token comment"># 下载最新版本WordPress到/var/www/html目录</span>$ <span class="token function">sudo</span> <span class="token function">wget</span> https://wordpress.org/latest.tar.gz<span class="token comment"># 解压WordPress</span>$ <span class="token function">sudo</span> <span class="token function">tar</span> xpf latest.tar.gz$ <span class="token function">ls</span>latest.tar.gz  wordpress<span class="token comment"># 把解压之后的文件拷贝到/var/www/html</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> -R /var/www/html/wordpress/* /var/www/html/<span class="token comment"># 删除解压之后的wordpress目录和压缩包</span>$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf wordpress latest.tar.gz<span class="token comment"># 查看当前目录文件</span>$ <span class="token function">ls</span>index.php        wp-admin              wp-content         wp-load.php      wp-signup.phplicense.txt      wp-blog-header.php    wp-cron.php        wp-login.php     wp-trackback.phpreadme.html      wp-comments-post.php  wp-includes        wp-mail.php      xmlrpc.phpwp-activate.php  wp-config-sample.php  wp-links-opml.php  wp-settings.php<span class="token comment"># 更改文件夹的拥有者为指定的组</span>$ <span class="token function">sudo</span> <span class="token function">chown</span> -R www-data:www-data /var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首次登录WordPress后台，在浏览器端输入服务器IP地址并确认，WordPress正确安装的话即可出现图2界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress%E5%90%8E%E5%8F%B0.png"></p><p>图2-首次打开WordPress</p><p>点击``Let’s go!”按钮，出现图3所示界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress%E9%BB%98%E8%AE%A4%E7%99%BB%E5%85%A5%E7%95%8C%E9%9D%A2.png"></p><p>图3-数据库信息初始界面</p><p>图3中需要填写五项信息，分别为：<br>1.数据库名称，在本文中需要填写<code>wordpress&quot;;   2.用户名，即给用户赋予操作</code>wordpress”数据库权利的名称，本文中填写<code>username&quot;;   3.密码，对应用户名的密码，本文中填写</code>Userpwd123+”;<br>4.数据库所在服务器IP地址；<br>5.该WordPress所使用数据库表前缀，如果你需要在一个数据库中运行多个WordPress，则需要更改此项，本文不更改。</p><p>全部输入完成如图4所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress%E5%88%9D%E6%AC%A1%E5%A1%AB%E5%86%99%E4%BF%A1%E6%81%AF.png"></p><p>图4-数据库信息的填写</p><p>点击图4中的``Submit”按钮，即可出现图5界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-sucess-config-php.png"></p><p>图5-数据库连接成功</p><p>点击图5中的<code>Run the installation&quot;按钮进入图7所示界面。或者出现如图6所示，这表示自动创建</code>wp-config.php”文件失败：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-config.png"></p><p>图6-无法自动创建wp-config.php文件</p><p>图6提示自动创建wp-config.php失败，可以在/var/www/html目录下自行创建一个名为<code>wp-config.php&quot;文件，并将文本框中的内容复制进去，然后保存文件，之后之后点击</code>Run the installation”按钮即可出现图7界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-installation-init.png"></p><p>图7-WordPress后台登录信息填写初始界面</p><p>在图7中填入所有信息后如图8所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-installaion.png"></p><p>图8-WordPress后台登录信息填写完成</p><p>点击图8中的``Install WordPress”按钮进入图9界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-success.png"></p><p>图9-WordPress用户注册成功</p><p>点击图9中的``Log in”按钮，进入图10所示界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-login-init.png"></p><p>图10-初始登录界面</p><p>将图8中的信息填入在图10中之后，如图11所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-login.png"></p><p>图11-填入用户名和密码</p><p>点击图11中的``Log in”按钮进入图12所示后台界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-dashboard-1024x503.png"></p><p>图12-WordPress后台界面</p><p>在WordPress后台，你可以操作并更改你的整个网站，在浏览器端输入主机IP地址或者主机域名/wp-admin并确认即可登录你的网站。例如:_xxx.xxx.xxx.xxx/wp-admin_。<br>在浏览器端直接输入主机IP或者域名则会有图13所示WordPress主界面：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-site-init-1-1024x506.png"></p><p>图13-WordPress网站主界面</p><p>看见图13界面即表明你的WordPress网站已经搭建成功。至此，在Ubuntu20.04服务器上搭建WordPress.org网站已经进行完毕。</p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><p>下面列出的为使用WordPress中常见的问题以及解决方案：</p><h4 id="1-发布失败。-此响应不是合法的JSON响应-Publishing-failed-The-response-is-not-a-valid-JSON-response"><a href="#1-发布失败。-此响应不是合法的JSON响应-Publishing-failed-The-response-is-not-a-valid-JSON-response" class="headerlink" title="1.发布失败。 此响应不是合法的JSON响应(Publishing failed. The response is not a valid JSON response)"></a>1.发布失败。 此响应不是合法的JSON响应(Publishing failed. The response is not a valid JSON response)</h4><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-first-problem-1024x235.png"></p><p>图14-此响应不是合法的JSON响应</p><p>发表文章(Post)或者页面(Page)时候提示：发布失败。 此响应不是合法的JSON响应 (Publishing failed. The response is not a valid JSON response)。<br>解决此问题有多种方法，在这里只推荐两种方法，可以多尝试另外多种方法。推荐方法如下所示：</p><h5 id="1-修改固定链接格式"><a href="#1-修改固定链接格式" class="headerlink" title="1.修改固定链接格式"></a>1.修改固定链接格式</h5><p>进入WordPress后台，如图12所示，依次点击设置(Settings)-&gt;固定链接(Permalinks)-&gt;常用设置(Common Settings)。将固定链接格式改为文章名(Post name)，若已经是文章名，则修改为其他一种，保存，再将格式改为文章名保存。或者直接修改为朴素(Plain)，但是不建议这样修改，这样修改固定链接会变得难以理解，图中展示了修改为文章名的结果：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-first-solve.png"></p><p>图15-修改固定链接格式</p><h5 id="2-修改-htaccess文件权限以及修改apache2-conf内容"><a href="#2-修改-htaccess文件权限以及修改apache2-conf内容" class="headerlink" title="2.修改.htaccess文件权限以及修改apache2.conf内容"></a>2.修改.htaccess文件权限以及修改apache2.conf内容</h5><p>修改服务器中/var/www/html/.htaccess的权限，修改为755：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改权限</span>$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /var/www/html/.htaccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后修改固定链接格式为文章名(Post name)，测试是否成功。若依然失败，则需要保证启动mod_rewrite(默认不启动)，之后重启apache2服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动mod_rewrite</span>$ <span class="token function">sudo</span> a2enmod rewriteEnabling module rewrite.To activate the new configuration, you need to run:  systemctl restart apache2<span class="token comment"># 重启apache2服务器</span>$ <span class="token function">sudo</span> systemctl restart apache2.service<span class="token comment"># 如果执行sudo a2enmod rewrite之后出现如下，则mod_rewrite之前已经启动，无需重启apache2服务器</span>Module rewrite already enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后修改固定链接格式为文章名(Post name)，测试是否成功。若还是失败，则说明您的apache2配置可能太严格了，需要修改服务器上/etc/apache2/apache2.conf文件内容。首先打开/etc/apache2/apache2.conf，然后在文件中查找如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找如下字符串</span>AllowOverride None<span class="token comment"># 找到如下内容</span><span class="token operator">&lt;</span>Directory /var/www/<span class="token operator">></span>Options Indexes FollowSymLinksAllowOverride NoneRequire all granted<span class="token operator">&lt;</span>/Directory<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将AllowOverride None中的None修改为All。之后重启apache2服务(sudo systemctl restart apache2.service)。<br>最终修改固定链接测试是否成功。</p><h4 id="2-安装主题或插件需要FTP"><a href="#2-安装主题或插件需要FTP" class="headerlink" title="2.安装主题或插件需要FTP"></a>2.安装主题或插件需要FTP</h4><p>进入服务器端/var/www/html/wp-content目录，新建一个名为tmp的文件夹，并设置tmp文件夹的权限为777(/var/www/html/wp-content/tmp)。之后返回到网站根目录(/var/www/html)，编辑wp-config.php并添加如下代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'WP_TEMP_DIR'</span><span class="token punctuation">,</span><span class="token constant">ABSPATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'wp-content/tmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_METHOD"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_CHMOD_DIR"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_CHMOD_FILE"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加之后的结果内容如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** Absolute path to the WordPress directory. */</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'ABSPATH'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">define</span><span class="token punctuation">(</span> <span class="token single-quoted-string string">'ABSPATH'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'WP_TEMP_DIR'</span><span class="token punctuation">,</span><span class="token constant">ABSPATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'wp-content/tmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_METHOD"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_CHMOD_DIR"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"FS_CHMOD_FILE"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** Sets up WordPress vars and included files. */</span><span class="token keyword">require_once</span> <span class="token constant">ABSPATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'wp-settings.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后设置WordPress的主题文件夹(/var/www/html/wp-content/themes)和插件文件夹(/var/www/html/wp-content/plugins)的权限为777。之后便可以更新主体和插件，而不需要FTP。</p><h4 id="3-修改WordPress文件上传限制-Maximum-upload-file-size-2-MB"><a href="#3-修改WordPress文件上传限制-Maximum-upload-file-size-2-MB" class="headerlink" title="3.修改WordPress文件上传限制(Maximum upload file size: 2 MB.)"></a>3.修改WordPress文件上传限制(Maximum upload file size: 2 MB.)</h4><p>WordPress上传文件一般都有限制文件大小，通常为2M，如图16所示：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-upload-2M-1024x468.png"></p><p>图16-限制上传文件大小为2M</p><p>这个限制大小包括图片和视频，一般情况下，对于大部分视频或者部分图片来讲2M大小的空间是不够用的。这时，就需要修改上传文件大小限制，从而上传大于2M的多媒体文件。<br>WordPress上传文件限制是由PHP的环境配置决定的，通过更改PHP的配置文件可以修改上传限制，PHP的配置文件名为php.ini，全路径通常为：/etc/php/PHP版本号/apache2/php.ini。若配置文件位置未知，则可以在网站根目录(/var/www/html)下新建一个名为phpinfo.php的php文件，内容为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 查看PHP配置信息</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存文件之后在浏览器端输入：主机IP地址/phpinfo.php确认即可得到类似如图17：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-phpinfo-1024x304.png"></p><p>图17</p><p>即可得知PHP配置文件的路径为：/etc/php/7.4/apache2/php.ini。随后打开该路径下的php.ini，在配置文件中搜索三个参数：upload_max_filesize，post_max_size和max_execution_time，如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">; Maximum allowed size for uploaded files.</span><span class="token comment">; http://php.net/upload-max-filesize</span><span class="token constant">upload_max_filesize</span> <span class="token attr-value"><span class="token punctuation">=</span> 2M</span>...<span class="token comment">; Maximum size of POST data that PHP will accept.</span><span class="token comment">; Its value may be 0 to disable the limit. It is ignored if POST data reading</span><span class="token comment">; is disabled through enable_post_data_reading.</span><span class="token comment">; http://php.net/post-max-size</span><span class="token constant">post_max_size</span> <span class="token attr-value"><span class="token punctuation">=</span> 8M</span>...<span class="token comment">; Maximum execution time of each script, in seconds</span><span class="token comment">; http://php.net/max-execution-time</span><span class="token comment">; Note: This directive is hardcoded to 0 for the CLI SAPI</span><span class="token constant">max_execution_time</span> <span class="token attr-value"><span class="token punctuation">=</span> 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>upload_max_filesize为文件的最大上传大小，在这里为2M，也是默认的大小，可以更改为512M；post_max_size为PHP将接受的POST数据的最大大小，也可以更改为512M；max_execution_time为执行时间，在这里即为上传文件的最大时间，超过最大时间的话，服务器将会强制终端任务，在这里可以更改为600，即10分钟。以上修改值仅为参考，可根据自己的具体情况进行更改。<br>修改完成保存文件，重启apache2服务器：sudo systemctl restart apache2.service。即可发现最大上传文件大小已经修改为512M，如图18：</p><p><img src="https://zpj.io/wp-content/uploads/2020/10/wordpress-upload-512M-1024x468.png"></p><p>图18-最大上传限制修改为512M</p><p>至此，修改WordPress文件上传限制完成。</p>]]></content>
    
    
    <summary type="html">如何在Ubuntu20.04服务器上搭建WordPress.org网站</summary>
    
    
    
    <category term="Research" scheme="http://example.com/categories/Research/"/>
    
    
    <category term="Setup" scheme="http://example.com/tags/Setup/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="wordpress" scheme="http://example.com/tags/wordpress/"/>
    
    <category term="XichengRen" scheme="http://example.com/tags/XichengRen/"/>
    
  </entry>
  
</feed>
